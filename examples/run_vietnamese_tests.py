"""
V√≠ d·ª• v·ªÅ c√°ch ch·∫°y c√°c b√†i ki·ªÉm tra LLM th·ª±c v·ªõi vƒÉn b·∫£n ti·∫øng Vi·ªát.

Script n√†y minh h·ªça c√°ch thi·∫øt l·∫≠p v√† ch·∫°y c√°c b√†i ki·ªÉm tra t√≠ch h·ª£p LLM
v·ªõi d·ªØ li·ªáu ti·∫øng Vi·ªát th·ª±c t·∫ø.
"""

import os
import subprocess
import sys
from pathlib import Path

from loguru import logger

from src.config import settings
from src.config.logging import get_module_logger

# Create module-bound logger for better debugging
logger = get_module_logger(__name__)


def check_pixi_availability():
    """Ki·ªÉm tra xem pixi c√≥ s·∫µn s√†ng kh√¥ng."""
    try:
        result = subprocess.run(
            ["pixi", "--version"], capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0:
            version = result.stdout.strip()
            logger.info(f"‚úÖ Pixi version: {version}")
            return True
        else:
            logger.info("‚ùå Pixi kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng c√°ch")
            return False
    except FileNotFoundError:
        logger.exception("‚ùå Pixi kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        return False
    except subprocess.TimeoutExpired:
        logger.exception("‚ùå Pixi kh√¥ng ph·∫£n h·ªìi")
        return False
    except Exception as e:
        logger.exception(f"‚ùå L·ªói khi ki·ªÉm tra Pixi: {e}")
        return False


def sync_dependencies():
    """C√†i ƒë·∫∑t dependencies v·ªõi Pixi."""
    logger.info("üîÑ ƒê·ªìng b·ªô dependencies...")
    try:
        result = subprocess.run(
            ["pixi", "install"], cwd=Path(__file__).parent.parent, timeout=120
        )
        if result.returncode == 0:
            logger.info("‚úÖ Dependencies ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô th√†nh c√¥ng")
            return True
        else:
            logger.info("‚ùå L·ªói khi ƒë·ªìng b·ªô dependencies")
            return False
    except subprocess.TimeoutExpired:
        logger.exception("‚ùå Timeout khi ƒë·ªìng b·ªô dependencies")
        return False
    except Exception as e:
        logger.exception(f"‚ùå L·ªói khi ƒë·ªìng b·ªô dependencies: {e}")
        return False


def check_dependencies():
    """Ki·ªÉm tra c√°c dependencies c·∫ßn thi·∫øt."""
    logger.info("üîç Ki·ªÉm tra dependencies...")
    if not check_pixi_availability():
        logger.info("\n‚ùå C·∫ßn c√†i ƒë·∫∑t Pixi:")
        logger.info("   curl -fsSL https://pixi.sh/install.sh | bash")
        return False
    try:
        result = subprocess.run(
            ["pixi", "run", "python", "-c", "import pytest; print('pytest available')"],
            capture_output=True,
            text=True,
            timeout=30,
        )
        if result.returncode == 0:
            logger.info("‚úÖ pytest c√≥ s·∫µn trong Pixi environment")
            return True
        else:
            logger.info("‚ùå pytest kh√¥ng c√≥ s·∫µn trong Pixi environment")
            logger.info("üîÑ Th·ª≠ ƒë·ªìng b·ªô dependencies...")
            if sync_dependencies():
                result = subprocess.run(
                    [
                        "pixi",
                        "run",
                        "python",
                        "-c",
                        "import pytest; print('pytest available')",
                    ],
                    capture_output=True,
                    text=True,
                    timeout=30,
                )
                if result.returncode == 0:
                    logger.info("‚úÖ pytest ƒë√£ c√≥ s·∫µn sau khi ƒë·ªìng b·ªô")
                    return True
            logger.info("   Ch·∫°y th·ªß c√¥ng: pixi install")
            return False
    except Exception as e:
        logger.exception(f"‚ùå L·ªói khi ki·ªÉm tra pytest: {e}")
        return False


def show_help():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng script."""
    logger.info(
        "\nüöÄ Vietnamese LLM Testing Script\n\nC√°ch s·ª≠ d·ª•ng:\n    # S·ª≠ d·ª•ng Pixi (khuy·∫øn ngh·ªã)\n    pixi run python examples/run_vietnamese_tests.py\n    \n    # Ho·∫∑c s·ª≠ d·ª•ng Python tr·ª±c ti·∫øp\n    python examples/run_vietnamese_tests.py\n\nY√™u c·∫ßu:\n    - Pixi package manager (https://pixi.sh)\n    - Dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t: pixi install\n\nC·∫•u h√¨nh:\n    Script n√†y s·ª≠ d·ª•ng c·∫•u h√¨nh t·ª´ src/config/settings.py v√† environment variables.\n\n    Environment Variables (t√πy ch·ªçn):\n    - LLM_TEST_MODEL_PATH: ƒê∆∞·ªùng d·∫´n ƒë·∫øn m√¥ h√¨nh LLM c·ª•c b·ªô\n    - LLM_TEST_API_KEY: API key cho d·ªãch v·ª• LLM ƒë√°m m√¢y\n    - LLM_TEST_TEMPERATURE: Nhi·ªát ƒë·ªô cho generation (m·∫∑c ƒë·ªãnh t·ª´ config)\n    - LLM_TEST_MAX_TOKENS: S·ªë token t·ªëi ƒëa (m·∫∑c ƒë·ªãnh t·ª´ config)\n    - LLM_TEST_TIMEOUT: Th·ªùi gian ch·ªù (m·∫∑c ƒë·ªãnh: 60s)\n\n    C·∫•u h√¨nh t·ª´ config.py:\n    - llm_enhance_model: M√¥ h√¨nh cho text enhancement\n    - llm_sum_model: M√¥ h√¨nh cho summarization\n    - llm_enhance_temperature: Nhi·ªát ƒë·ªô cho enhancement\n    - llm_sum_temperature: Nhi·ªát ƒë·ªô cho summarization\n    - llm_enhance_max_tokens: Token t·ªëi ƒëa cho enhancement\n    - llm_sum_max_tokens: Token t·ªëi ƒëa cho summarization\n\nV√≠ d·ª•:\n    # S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh t·ª´ config.py\n    pixi run python examples/run_vietnamese_tests.py\n\n    # S·ª≠ d·ª•ng model path t√πy ch·ªânh\n    LLM_TEST_MODEL_PATH=/path/to/model pixi run python examples/run_vietnamese_tests.py\n\n    # S·ª≠ d·ª•ng API key\n    LLM_TEST_API_KEY=sk-123... pixi run python examples/run_vietnamese_tests.py\n\nC√†i ƒë·∫∑t Pixi:\n    curl -fsSL https://pixi.sh/install.sh | bash\n\nC√†i ƒë·∫∑t dependencies:\n    pixi install\n"
    )


def validate_configuration():
    """Ki·ªÉm tra v√† x√°c th·ª±c c·∫•u h√¨nh cho c√°c b√†i ki·ªÉm tra."""
    issues = []
    warnings = []
    enhance_model_path = os.getenv("LLM_TEST_MODEL_PATH") or settings.llm_enhance_model
    if enhance_model_path:
        if not Path(enhance_model_path).exists():
            issues.append(f"Enhancement model path kh√¥ng t·ªìn t·∫°i: {enhance_model_path}")
        else:
            logger.info(f"‚úÖ Enhancement model path h·ª£p l·ªá: {enhance_model_path}")
    else:
        issues.append("Kh√¥ng c√≥ enhancement model path ƒë∆∞·ª£c c·∫•u h√¨nh")
    sum_model_path = settings.llm_sum_model
    if sum_model_path:
        if "/" in sum_model_path and (not Path(sum_model_path).exists()):
            logger.info(f"‚úÖ Summarization model (HuggingFace): {sum_model_path}")
        elif Path(sum_model_path).exists():
            logger.info(f"‚úÖ Summarization model path h·ª£p l·ªá: {sum_model_path}")
        else:
            warnings.append(f"Summarization model path kh√¥ng t·ªìn t·∫°i: {sum_model_path}")
    api_key = os.getenv("LLM_TEST_API_KEY")
    if not enhance_model_path and (not api_key):
        issues.append("C·∫ßn c·∫•u h√¨nh model path ho·∫∑c API key")
    if not settings.paths.templates_dir.exists():
        warnings.append(f"Templates directory kh√¥ng t·ªìn t·∫°i: {settings.paths.templates_dir}")
    if not settings.paths.models_dir.exists():
        warnings.append(f"Models directory kh√¥ng t·ªìn t·∫°i: {settings.paths.models_dir}")
    if settings.llm_enhance_temperature < 0 or settings.llm_enhance_temperature > 2:
        warnings.append(
            f"LLM enhancement temperature ngo√†i ph·∫°m vi h·ª£p l·ªá: {settings.llm_enhance_temperature}"
        )
    if settings.llm_sum_temperature < 0 or settings.llm_sum_temperature > 2:
        warnings.append(
            f"LLM summarization temperature ngo√†i ph·∫°m vi h·ª£p l·ªá: {settings.llm_sum_temperature}"
        )
    return (issues, warnings)


def main():
    """Ch·∫°y c√°c b√†i ki·ªÉm tra LLM th·ª±c v·ªõi c·∫•u h√¨nh ti·∫øng Vi·ªát."""
    if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help", "help"]:
        show_help()
        return 0
    logger.info("üöÄ Ch·∫°y c√°c b√†i ki·ªÉm tra LLM th·ª±c v·ªõi vƒÉn b·∫£n ti·∫øng Vi·ªát")
    logger.info("=" * 60)
    if not check_dependencies():
        logger.info("\n‚ùå Dependencies kh√¥ng ƒë·∫ßy ƒë·ªß. Vui l√≤ng c√†i ƒë·∫∑t tr∆∞·ªõc khi ch·∫°y.")
        return 1
    logger.info("\nüîç Ki·ªÉm tra c·∫•u h√¨nh...")
    issues, warnings = validate_configuration()
    if warnings:
        logger.warning("\n‚ö†Ô∏è  C·∫£nh b√°o:")
        for warning in warnings:
            logger.info(f"   - {warning}")
    if issues:
        logger.info("\n‚ùå L·ªói c·∫•u h√¨nh:")
        for issue in issues:
            logger.info(f"   - {issue}")
        logger.info("\nC√°c c√°ch c·∫•u h√¨nh:")
        logger.info("  1. ƒê·∫∑t LLM_TEST_MODEL_PATH environment variable")
        logger.info("  2. ƒê·∫∑t LLM_TEST_API_KEY environment variable")
        logger.info("  3. C·∫•u h√¨nh llm_enhance_model trong config.py")
        logger.info("\nV√≠ d·ª•:")
        logger.info("  export LLM_TEST_MODEL_PATH='/path/to/your/model'")
        logger.info("  # HO·∫∂C")
        logger.info("  export LLM_TEST_API_KEY='sk-your-api-key-here'")
        logger.info("\nSau ƒë√≥ ch·∫°y l·∫°i script n√†y.")
        return 1
    model_path = os.getenv("LLM_TEST_MODEL_PATH") or settings.llm_enhance_model
    api_key = os.getenv("LLM_TEST_API_KEY")
    logger.info("\nüìã Th√¥ng tin c·∫•u h√¨nh:")
    if model_path:
        logger.info(f"   üìÅ M√¥ h√¨nh c·ª•c b·ªô: {model_path}")
        if Path(model_path).exists():
            logger.info("   ‚úÖ ƒê∆∞·ªùng d·∫´n m√¥ h√¨nh h·ª£p l·ªá")
        else:
            logger.warning("   ‚ö†Ô∏è  ƒê∆∞·ªùng d·∫´n m√¥ h√¨nh kh√¥ng t·ªìn t·∫°i")
    if api_key:
        logger.info(f"   üîë API key: {api_key[:10]}...")
    logger.info("   üèóÔ∏è  C·∫•u h√¨nh t·ª´ config.py:")
    logger.info(f"      - Environment: {settings.environment}")
    logger.debug(f"      - Debug mode: {settings.debug}")
    logger.info(f"      - Templates dir: {settings.paths.templates_dir}")
    logger.info(f"      - Models dir: {settings.paths.models_dir}")
    env = os.environ.copy()
    env.update(
        {
            "LLM_TEST_MODEL_PATH": model_path or "",
            "LLM_TEST_API_KEY": api_key or "",
            "LLM_TEST_TEMPERATURE": str(
                os.getenv("LLM_TEST_TEMPERATURE", settings.llm_enhance_temperature)
            ),
            "LLM_TEST_MAX_TOKENS": str(
                os.getenv("LLM_TEST_MAX_TOKENS", settings.llm_enhance_max_tokens or 200)
            ),
            "LLM_TEST_TIMEOUT": str(os.getenv("LLM_TEST_TIMEOUT", "60")),
            "PYTHONPATH": str(Path(__file__).parent.parent),
            "LLM_SUM_MODEL": settings.llm_sum_model,
            "LLM_SUM_TEMPERATURE": str(settings.llm_sum_temperature),
            "LLM_SUM_MAX_TOKENS": str(settings.llm_sum_max_tokens or 1000),
            "LLM_SUM_QUANTIZATION": str(settings.llm_sum_quantization or ""),
            "LLM_ENHANCE_QUANTIZATION": str(settings.llm_enhance_quantization or ""),
        }
    )
    logger.info("\n‚öôÔ∏è  C·∫•u h√¨nh LLM:")
    logger.info(f"   - M√¥ h√¨nh enhancement: {model_path}")
    logger.info(f"   - M√¥ h√¨nh summarization: {settings.llm_sum_model}")
    logger.info(f"   - Nhi·ªát ƒë·ªô enhancement: {env['LLM_TEST_TEMPERATURE']}")
    logger.info(f"   - Nhi·ªát ƒë·ªô summarization: {env['LLM_SUM_TEMPERATURE']}")
    logger.info(f"   - Token t·ªëi ƒëa enhancement: {env['LLM_TEST_MAX_TOKENS']}")
    logger.info(f"   - Token t·ªëi ƒëa summarization: {env['LLM_SUM_MAX_TOKENS']}")
    logger.info(f"   - Th·ªùi gian ch·ªù: {env['LLM_TEST_TIMEOUT']}s")
    logger.info(
        f"   - GPU memory utilization: {settings.llm_enhance_gpu_memory_utilization}"
    )
    logger.info(
        f"   - Max model length enhancement: {settings.llm_enhance_max_model_len}"
    )
    logger.info(
        f"   - Max model length summarization: {settings.llm_sum_max_model_len}"
    )
    logger.info(
        f"   - Quantization enhancement: {settings.llm_enhance_quantization or 'auto-detect'}"
    )
    logger.info(
        f"   - Quantization summarization: {settings.llm_sum_quantization or 'auto-detect'}"
    )
    logger.info("\nüß™ Ch·∫°y c√°c b√†i ki·ªÉm tra LLM th·ª±c...")
    cmd = [
        "pixi",
        "run",
        "pytest",
        "-m",
        "real_llm",
        "-v",
        "--tb=short",
        "tests/integration/test_real_llm_integration.py",
    ]
    try:
        result = subprocess.run(cmd, env=env, cwd=Path(__file__).parent.parent)
        if result.returncode == 0:
            logger.info("\n‚úÖ T·∫•t c·∫£ c√°c b√†i ki·ªÉm tra ƒë√£ ho√†n th√†nh th√†nh c√¥ng!")
            logger.info("\nüìä K·∫øt qu·∫£ ki·ªÉm tra bao g·ªìm:")
            logger.info("   - C·∫£i thi·ªán vƒÉn b·∫£n ti·∫øng Vi·ªát")
            logger.info("   - T√≥m t·∫Øt cu·ªôc h·ªçp c√≥ c·∫•u tr√∫c")
            logger.info("   - T·∫£i v√† cache m√¥ h√¨nh")
            logger.info("   - X·ª≠ l√Ω l·ªói")
            logger.info("   - ƒê√°nh gi√° hi·ªáu su·∫•t")
        else:
            logger.info(
                f"\n‚ùå M·ªôt s·ªë b√†i ki·ªÉm tra ƒë√£ th·∫•t b·∫°i (m√£ l·ªói: {result.returncode})"
            )
            return result.returncode
    except FileNotFoundError:
        logger.exception("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y pytest ho·∫∑c pixi.")
        logger.exception("   H√£y c√†i ƒë·∫∑t dependencies v·ªõi:")
        logger.exception("   pixi install")
        return 1
    except KeyboardInterrupt:
        logger.exception("\n‚èπÔ∏è  ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
        return 1
    except Exception as e:
        logger.exception(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
